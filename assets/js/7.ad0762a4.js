(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{376:function(v,t,_){v.exports=_.p+"assets/img/DOM.42ebcb7d.jpg"},389:function(v,t,_){"use strict";_.r(t);var a=_(43),r=Object(a.a)({},(function(){var v=this,t=v.$createElement,a=v._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("h3",{attrs:{id:"什么是-javascript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-javascript"}},[v._v("#")]),v._v(" 什么是 JavaScript")]),v._v(" "),a("ol",[a("li",[a("h4",{attrs:{id:"javascript-历史"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-历史"}},[v._v("#")]),v._v(" JavaScript 历史")]),v._v(" "),a("p",[v._v("JavaScript 诞生于 1995 年, 由 Brendan Eich(布兰登.艾奇) 发明.起初只是为了验证表单,以避免大量与服务器通信的痛点.")]),v._v(" "),a("blockquote",[a("p",[v._v("Java 与 JavaScript 是两种完全不同的语言. 只是当时急于发布, 与 sun 公司结为开发联盟. 当时 Java 非常火爆以此蹭热度,因此将之前的 LiveScript 改名为 JavaScript")])]),v._v(" "),a("p",[v._v("1996 年 微软进入 web 浏览器领域. 至此拉开了网景和微软之间的大战, 最终以微软的胜利. 这就意味着有两个不同实现的 JavaScript. 开发者的痛苦从此开始.")]),v._v(" "),a("p",[v._v("1997 年 JavaScript1.1 作为提案交给了欧洲计算机制造商协会. 第 39 技术委员会(TC39)承担了标准化、通用、跨平台的脚本语言的语法和语义的任务 TC39B 委员会由网景、Sun、微软、Borland、Nombas 和其他有对此有兴趣的工程师组成")]),v._v(" "),a("p",[v._v("1998 年 ISO 和 IEC 也将 ECMAScript 采纳为标准, 从此各家浏览器厂商都以 ECMAScript 为 JavaScript 实现的依据.")])]),v._v(" "),a("li",[a("h4",{attrs:{id:"javascript-实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-实现"}},[v._v("#")]),v._v(" JavaScript 实现")]),v._v(" "),a("p",[a("strong",[v._v("ECMAScript")])]),v._v(" "),a("p",[v._v("JavaScript 和 ECMAScript 基本是同义词,但是 JavaScript 不限于 ECMA-62 所定义."),a("br"),v._v("\n完整的 JavaScript 实现包含以下几部分")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("核心(ECMAScript)\nECMAScript 定义如何部分")]),v._v(" "),a("ul",[a("li",[v._v("语法")]),v._v(" "),a("li",[v._v("类型")]),v._v(" "),a("li",[v._v("语句")]),v._v(" "),a("li",[v._v("关键字")]),v._v(" "),a("li",[v._v("保留字")]),v._v(" "),a("li",[v._v("操作符")]),v._v(" "),a("li",[v._v("全局对象")])]),v._v(" "),a("p",[v._v("ECMAScript 有着不同的版本 "),a("a",{attrs:{href:"https://zh.wikipedia.org/wiki/ECMAScript",target:"_blank",rel:"noopener noreferrer"}},[v._v(">>>进入了解 ECMAScript"),a("OutboundLink")],1)])]),v._v(" "),a("li",[a("p",[v._v("文档对象模型(DOM)")]),v._v(" "),a("p",[a("strong",[v._v("DOM(Document Object Model)")]),v._v(" DOM 是一个应用编程接口 API,用于在 HTML 中使用扩展 XML. DOM 将整个页面抽象成一个树数据模型")]),v._v(" "),a("p",[a("img",{attrs:{src:_(376),alt:"DOM结构图"}})]),v._v(" "),a("p",[a("strong",[v._v("DOM 级别")]),v._v(" 分为 DOM Level1、 DOM Level2,、 DOM Level3")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("DOM Level1: 目标是映射文档结构")])]),v._v(" "),a("li",[a("p",[v._v("DOM Level2: 对 DOM Level1 进行了许多的扩展. 例如: 鼠标和用户界面事件、范围、遍历节点. 支持以下接口:")]),v._v(" "),a("p",[a("strong",[v._v("DOM 视图")]),v._v(": 追踪文档不同视图的接口")]),v._v(" "),a("p",[a("strong",[v._v("DOM 事件")]),v._v(": 描述事件以及事件处理接口")]),v._v(" "),a("p",[a("strong",[v._v("DOM 样式")]),v._v(": 描述处理 CSS 样式的接口")]),v._v(" "),a("p",[a("strong",[v._v("DOM 遍历和范围")]),v._v(": 描述遍历和操作 DOM 树的接口")])]),v._v(" "),a("li",[a("p",[v._v("DOM Level3: 进一步扩展了 DOM. 例如: 验证文档、支持所有 XML1.0")])])])]),v._v(" "),a("li",[a("p",[v._v("浏览器对象模型(BOM)")]),v._v(" "),a("p",[a("strong",[v._v("浏览器对象模型(BOM)")]),v._v(": 用于支持访问和操作浏览器窗口. 主要有以下能力:")]),v._v(" "),a("ul",[a("li",[v._v("弹出浏览器窗口")]),v._v(" "),a("li",[v._v("移动、缩放、关闭浏览器窗口")]),v._v(" "),a("li",[v._v("Navigator 对象, 提供详细的浏览器信息")]),v._v(" "),a("li",[v._v("location 对象, 浏览器加载页面详细信息")]),v._v(" "),a("li",[v._v("screen 对象, 提供浏览器分辨率详细信息")]),v._v(" "),a("li",[v._v("performance 对象, 浏览器内存占用、导航行为和时间统计的详细信息")]),v._v(" "),a("li",[v._v("对 cookie 的支持以及 XMLHttpRequest 和 IE 的 ActiveXObject")])])])])])])])}),[],!1,null,null,null);t.default=r.exports}}]);